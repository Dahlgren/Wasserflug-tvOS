//
// PaymentInvoiceListV2ResponseSubscriptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif
import Vapor

public struct PaymentInvoiceListV2ResponseSubscriptions: Content, Hashable {

    public var id: Int
    public var subscription: Double
    public var periodStart: Date
    public var periodEnd: Date
    public var value: Double
    public var amountSubtotal: Double
    public var amountTotal: Double
    public var amountTax: Double
    public var plan: PaymentInvoiceListV2ResponsePlan

    public init(id: Int, subscription: Double, periodStart: Date, periodEnd: Date, value: Double, amountSubtotal: Double, amountTotal: Double, amountTax: Double, plan: PaymentInvoiceListV2ResponsePlan) {
        self.id = id
        self.subscription = subscription
        self.periodStart = periodStart
        self.periodEnd = periodEnd
        self.value = value
        self.amountSubtotal = amountSubtotal
        self.amountTotal = amountTotal
        self.amountTax = amountTax
        self.plan = plan
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case subscription
        case periodStart
        case periodEnd
        case value
        case amountSubtotal
        case amountTotal
        case amountTax
        case plan
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(subscription, forKey: .subscription)
        try container.encode(periodStart, forKey: .periodStart)
        try container.encode(periodEnd, forKey: .periodEnd)
        try container.encode(value, forKey: .value)
        try container.encode(amountSubtotal, forKey: .amountSubtotal)
        try container.encode(amountTotal, forKey: .amountTotal)
        try container.encode(amountTax, forKey: .amountTax)
        try container.encode(plan, forKey: .plan)
    }
}

