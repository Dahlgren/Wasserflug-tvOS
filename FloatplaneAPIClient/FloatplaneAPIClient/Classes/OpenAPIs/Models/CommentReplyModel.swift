//
// CommentReplyModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif
import Vapor

public struct CommentReplyModel: Content, Hashable {

    public enum UserInteraction: String, Content, Hashable, CaseIterable {
        case like = "like"
        case dislike = "dislike"
    }
    public var id: String
    public var blogPost: String
    public var user: UserModel
    public var contentReference: String
    public var contentReferenceType: String
    public var text: String
    public var replying: String
    public var postDate: Date
    public var editDate: Date
    public var likes: Int
    public var dislikes: Int
    public var score: Int
    public var interactionCounts: CommentModelInteractionCounts
    public var userInteraction: [UserInteraction]?

    public init(id: String, blogPost: String, user: UserModel, contentReference: String, contentReferenceType: String, text: String, replying: String, postDate: Date, editDate: Date, likes: Int, dislikes: Int, score: Int, interactionCounts: CommentModelInteractionCounts, userInteraction: [UserInteraction]? = nil) {
        self.id = id
        self.blogPost = blogPost
        self.user = user
        self.contentReference = contentReference
        self.contentReferenceType = contentReferenceType
        self.text = text
        self.replying = replying
        self.postDate = postDate
        self.editDate = editDate
        self.likes = likes
        self.dislikes = dislikes
        self.score = score
        self.interactionCounts = interactionCounts
        self.userInteraction = userInteraction
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case blogPost
        case user
        case contentReference
        case contentReferenceType
        case text
        case replying
        case postDate
        case editDate
        case likes
        case dislikes
        case score
        case interactionCounts
        case userInteraction
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(blogPost, forKey: .blogPost)
        try container.encode(user, forKey: .user)
        try container.encode(contentReference, forKey: .contentReference)
        try container.encode(contentReferenceType, forKey: .contentReferenceType)
        try container.encode(text, forKey: .text)
        try container.encode(replying, forKey: .replying)
        try container.encode(postDate, forKey: .postDate)
        try container.encode(editDate, forKey: .editDate)
        try container.encode(likes, forKey: .likes)
        try container.encode(dislikes, forKey: .dislikes)
        try container.encode(score, forKey: .score)
        try container.encode(interactionCounts, forKey: .interactionCounts)
        try container.encodeIfPresent(userInteraction, forKey: .userInteraction)
    }
}

