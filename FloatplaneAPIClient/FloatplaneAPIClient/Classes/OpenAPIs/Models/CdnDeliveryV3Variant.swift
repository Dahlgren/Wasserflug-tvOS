//
// CdnDeliveryV3Variant.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif
import Vapor

/** A &#x60;variant&#x60; represents one variant of a source of media. The most common differenitating factor between variants is video resolution, but there may be more variations based on &#x60;isHdr&#x60;, codecs, FPS, etc. It&#39;s possible that groups of variants may be divided into separate &#x60;groups&#x60; elements. */
public struct CdnDeliveryV3Variant: Content, Hashable {

    /** A programmatic name for this variant, for use with uniquely identifying this variant. */
    public var name: String
    /** A display-friendly label for this variant, for use in the UI. */
    public var label: String
    /** A relative *or* absolute URL containing resource information for this variant. Compared to the V2 API, this URL does not contain template information and will not need to be modified before use, other than optionally combining with an origin. This value may contain a trailing slash.  If this URL is absolute, it may be used as-is in order to load the media content. If this URL is relative, then it should be combined with an origin base URL. In order of preference: 1) use an origin from this variant object, 2) use an origin from this variant's group object, 3) use `https://floatplane.com`.  Do not use an origin from a different group, or from a different variant, as this may result in errors.  */
    public var url: String
    /** If `origins` is present, it will consist of one or more elements. */
    public var origins: [CdnDeliveryV3Origin]?
    /** An optional field prescribing this variant's order in relation to other variants. No guarantees other than being greater than or less than the order of other variants within this group (e.g., order may not be consecutive). */
    public var order: Int64?
    /** An optional field indicating if this variant is enabled. If this is not enabled, it may be visible to the user, but not selectable. If this field is not present, assume a default value of `false`, for safety. */
    public var enabled: Bool?
    /** An optional field indicating if this variant should be hidden. If hidden, it should not be shown to the user nor considered in any code logic. If this field is not present, assume a default value of `false`. Only truthy values should hide a variant. */
    public var hidden: Bool?
    public var meta: CdnDeliveryV3Meta?
    /** An optional string describing the MIME Type of this media source. */
    public var mimeType: String?

    public init(name: String, label: String, url: String, origins: [CdnDeliveryV3Origin]? = nil, order: Int64? = nil, enabled: Bool? = nil, hidden: Bool? = nil, meta: CdnDeliveryV3Meta? = nil, mimeType: String? = nil) {
        self.name = name
        self.label = label
        self.url = url
        self.origins = origins
        self.order = order
        self.enabled = enabled
        self.hidden = hidden
        self.meta = meta
        self.mimeType = mimeType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case label
        case url
        case origins
        case order
        case enabled
        case hidden
        case meta
        case mimeType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(label, forKey: .label)
        try container.encode(url, forKey: .url)
        try container.encodeIfPresent(origins, forKey: .origins)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(hidden, forKey: .hidden)
        try container.encodeIfPresent(meta, forKey: .meta)
        try container.encodeIfPresent(mimeType, forKey: .mimeType)
    }
}

