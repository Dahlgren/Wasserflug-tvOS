//
// CdnDeliveryV3MetaAudio.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif
import Vapor

public struct CdnDeliveryV3MetaAudio: Content, Hashable {

    /** RFC 6381 codec string indicating stream data chunk format. */
    public var codec: String?
    /** RFC 6381 codec string indicating stream format on the most basic level, without the addition of profile/level/etc. information. */
    public var codecSimple: String?
    /** MIME-type for individual stream data chunks (as opposed to a containing playlist). */
    public var mimeType: String?
    /** Count of channels carried by the audio stream. */
    public var channelCount: Int?
    /** Count of samples recorded per second. */
    public var samplerate: Int?
    public var bitrate: CdnDeliveryV3MediaBitrateInfoBitrate?

    public init(codec: String? = nil, codecSimple: String? = nil, mimeType: String? = nil, channelCount: Int? = nil, samplerate: Int? = nil, bitrate: CdnDeliveryV3MediaBitrateInfoBitrate? = nil) {
        self.codec = codec
        self.codecSimple = codecSimple
        self.mimeType = mimeType
        self.channelCount = channelCount
        self.samplerate = samplerate
        self.bitrate = bitrate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case codec
        case codecSimple
        case mimeType
        case channelCount
        case samplerate
        case bitrate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(codec, forKey: .codec)
        try container.encodeIfPresent(codecSimple, forKey: .codecSimple)
        try container.encodeIfPresent(mimeType, forKey: .mimeType)
        try container.encodeIfPresent(channelCount, forKey: .channelCount)
        try container.encodeIfPresent(samplerate, forKey: .samplerate)
        try container.encodeIfPresent(bitrate, forKey: .bitrate)
    }
}

