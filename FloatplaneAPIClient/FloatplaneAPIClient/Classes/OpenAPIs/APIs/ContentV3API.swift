//
// ContentV3API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ContentV3API {

    /**
     Dislike Content
     POST /api/v3/content/dislike
     Toggles the dislike status on a piece of content. If liked before, it will turn into a dislike. If disliked before, the dislike will be removed.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter contentLikeV3Request: (body)  
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func dislikeContentRaw(contentLikeV3Request: ContentLikeV3Request, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/dislike"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            try localVariableRequest.content.encode(contentLikeV3Request, using: Configuration.contentConfiguration.requireEncoder(for: ContentLikeV3Request.defaultContentType))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum DislikeContent {
        case http200(value: [String], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Dislike Content
     POST /api/v3/content/dislike
     Toggles the dislike status on a piece of content. If liked before, it will turn into a dislike. If disliked before, the dislike will be removed.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter contentLikeV3Request: (body)  
     - returns: `EventLoopFuture` of `DislikeContent` 
     */
    open class func dislikeContent(contentLikeV3Request: ContentLikeV3Request, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<DislikeContent> {
        return dislikeContentRaw(contentLikeV3Request: contentLikeV3Request, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> DislikeContent in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([String].self, using: Configuration.contentConfiguration.requireDecoder(for: [String].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }


    /**
     Get Blog Post
     GET /api/v3/content/post
     Retrieve more details on a specific blog post object for viewing.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the post to be retrieved. 
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getBlogPostRaw(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/post"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var id: String

                enum CodingKeys: String, CodingKey {
                    case id = "id"
                }
            }
            try localVariableRequest.query.encode(QueryParams(id: id))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetBlogPost {
        case http200(value: ContentPostV3Response, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Blog Post
     GET /api/v3/content/post
     Retrieve more details on a specific blog post object for viewing.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the post to be retrieved. 
     - returns: `EventLoopFuture` of `GetBlogPost` 
     */
    open class func getBlogPost(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetBlogPost> {
        return getBlogPostRaw(id: id, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetBlogPost in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(ContentPostV3Response.self, using: Configuration.contentConfiguration.requireDecoder(for: ContentPostV3Response.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }


    /**
     Get Creator Blog Posts
     GET /api/v3/content/creator
     Retrieve a paginated list of blog posts from a creator. Or search for blog posts from a creator.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The GUID of the creator to retrieve posts from. 
     - parameter limit: (query) The maximum number of posts to return. 
     - parameter fetchAfter: (query) The number of posts to skip. Usually a multiple of `limit`, to get the next \"page\" of results. (optional)
     - parameter search: (query) Search filter to look for specific posts. (optional)
     - parameter tags: (query) An array of tags to search against, possibly in addition to `search`. (optional)
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getCreatorBlogPostsRaw(id: String, limit: Int, fetchAfter: Int? = nil, search: String? = nil, tags: [String]? = nil, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/creator"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var id: String
                var limit: Int
                var fetchAfter: Int?
                var search: String?
                var tags: [String]?

                enum CodingKeys: String, CodingKey {
                    case id = "id"
                    case limit = "limit"
                    case fetchAfter = "fetchAfter"
                    case search = "search"
                    case tags = "tags"
                }
            }
            try localVariableRequest.query.encode(QueryParams(id: id, limit: limit, fetchAfter: fetchAfter, search: search, tags: tags))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetCreatorBlogPosts {
        case http200(value: [BlogPostModelV3], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Creator Blog Posts
     GET /api/v3/content/creator
     Retrieve a paginated list of blog posts from a creator. Or search for blog posts from a creator.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The GUID of the creator to retrieve posts from. 
     - parameter limit: (query) The maximum number of posts to return. 
     - parameter fetchAfter: (query) The number of posts to skip. Usually a multiple of `limit`, to get the next \"page\" of results. (optional)
     - parameter search: (query) Search filter to look for specific posts. (optional)
     - parameter tags: (query) An array of tags to search against, possibly in addition to `search`. (optional)
     - returns: `EventLoopFuture` of `GetCreatorBlogPosts` 
     */
    open class func getCreatorBlogPosts(id: String, limit: Int, fetchAfter: Int? = nil, search: String? = nil, tags: [String]? = nil, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetCreatorBlogPosts> {
        return getCreatorBlogPostsRaw(id: id, limit: limit, fetchAfter: fetchAfter, search: search, tags: tags, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetCreatorBlogPosts in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([BlogPostModelV3].self, using: Configuration.contentConfiguration.requireDecoder(for: [BlogPostModelV3].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }


    /**
     Get Multi Creator Blog Posts
     GET /api/v3/content/creator/list
     Retrieve paginated blog posts from multiple creators for the home page.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter ids: (query) The GUID(s) of the creator(s) to retrieve posts from. 
     - parameter limit: (query) The maximum number of posts to retrieve. 
     - parameter fetchAfter: (query) For pagination, this is used to determine which posts to skip. There should be one `fetchAfter` object for each creator in `ids`. The `moreFetchable` in the request, and all of the data, comes from the `ContentCreatorListV3Response`. (optional)
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getMultiCreatorBlogPostsRaw(ids: [String], limit: Int, fetchAfter: [ContentCreatorListLastItems]? = nil, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/creator/list"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var ids: [String]
                var limit: Int
                var fetchAfter: [ContentCreatorListLastItems]?

                enum CodingKeys: String, CodingKey {
                    case ids = "ids"
                    case limit = "limit"
                    case fetchAfter = "fetchAfter"
                }
            }
            try localVariableRequest.query.encode(QueryParams(ids: ids, limit: limit, fetchAfter: fetchAfter))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetMultiCreatorBlogPosts {
        case http200(value: ContentCreatorListV3Response, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Multi Creator Blog Posts
     GET /api/v3/content/creator/list
     Retrieve paginated blog posts from multiple creators for the home page.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter ids: (query) The GUID(s) of the creator(s) to retrieve posts from. 
     - parameter limit: (query) The maximum number of posts to retrieve. 
     - parameter fetchAfter: (query) For pagination, this is used to determine which posts to skip. There should be one `fetchAfter` object for each creator in `ids`. The `moreFetchable` in the request, and all of the data, comes from the `ContentCreatorListV3Response`. (optional)
     - returns: `EventLoopFuture` of `GetMultiCreatorBlogPosts` 
     */
    open class func getMultiCreatorBlogPosts(ids: [String], limit: Int, fetchAfter: [ContentCreatorListLastItems]? = nil, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetMultiCreatorBlogPosts> {
        return getMultiCreatorBlogPostsRaw(ids: ids, limit: limit, fetchAfter: fetchAfter, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetMultiCreatorBlogPosts in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(ContentCreatorListV3Response.self, using: Configuration.contentConfiguration.requireDecoder(for: ContentCreatorListV3Response.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }


    /**
     Get Picture Content
     GET /api/v3/content/picture
     Retrieve more information on a picture attachment from a blog post in order to consume the picture content.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the picture attachment object, from the `BlogPostModelV3`. 
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getPictureContentRaw(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/picture"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var id: String

                enum CodingKeys: String, CodingKey {
                    case id = "id"
                }
            }
            try localVariableRequest.query.encode(QueryParams(id: id))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetPictureContent {
        case http200(value: ContentPictureV3Response, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Picture Content
     GET /api/v3/content/picture
     Retrieve more information on a picture attachment from a blog post in order to consume the picture content.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the picture attachment object, from the `BlogPostModelV3`. 
     - returns: `EventLoopFuture` of `GetPictureContent` 
     */
    open class func getPictureContent(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetPictureContent> {
        return getPictureContentRaw(id: id, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetPictureContent in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(ContentPictureV3Response.self, using: Configuration.contentConfiguration.requireDecoder(for: ContentPictureV3Response.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }


    /**
     Get Related Blog Posts
     GET /api/v3/content/related
     Retrieve a list of blog posts that are related to the post being viewed.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the originating post. 
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getRelatedBlogPostsRaw(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/related"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var id: String

                enum CodingKeys: String, CodingKey {
                    case id = "id"
                }
            }
            try localVariableRequest.query.encode(QueryParams(id: id))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetRelatedBlogPosts {
        case http200(value: [BlogPostModelV3], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Related Blog Posts
     GET /api/v3/content/related
     Retrieve a list of blog posts that are related to the post being viewed.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the originating post. 
     - returns: `EventLoopFuture` of `GetRelatedBlogPosts` 
     */
    open class func getRelatedBlogPosts(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetRelatedBlogPosts> {
        return getRelatedBlogPostsRaw(id: id, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetRelatedBlogPosts in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([BlogPostModelV3].self, using: Configuration.contentConfiguration.requireDecoder(for: [BlogPostModelV3].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }


    /**
     Get Video Content
     GET /api/v3/content/video
     Retrieve more information on a video attachment from a blog post in order to consume the video content.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the video attachment object, from the `BlogPostModelV3`. 
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getVideoContentRaw(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/video"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var id: String

                enum CodingKeys: String, CodingKey {
                    case id = "id"
                }
            }
            try localVariableRequest.query.encode(QueryParams(id: id))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetVideoContent {
        case http200(value: ContentVideoV3Response, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Video Content
     GET /api/v3/content/video
     Retrieve more information on a video attachment from a blog post in order to consume the video content.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the video attachment object, from the `BlogPostModelV3`. 
     - returns: `EventLoopFuture` of `GetVideoContent` 
     */
    open class func getVideoContent(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetVideoContent> {
        return getVideoContentRaw(id: id, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetVideoContent in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(ContentVideoV3Response.self, using: Configuration.contentConfiguration.requireDecoder(for: ContentVideoV3Response.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }


    /**
     Like Content
     POST /api/v3/content/like
     Toggles the like status on a piece of content. If disliked before, it will turn into a like. If liked before, the like will be removed.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter contentLikeV3Request: (body)  
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func likeContentRaw(contentLikeV3Request: ContentLikeV3Request, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/like"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            try localVariableRequest.content.encode(contentLikeV3Request, using: Configuration.contentConfiguration.requireEncoder(for: ContentLikeV3Request.defaultContentType))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum LikeContent {
        case http200(value: [String], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Like Content
     POST /api/v3/content/like
     Toggles the like status on a piece of content. If disliked before, it will turn into a like. If liked before, the like will be removed.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter contentLikeV3Request: (body)  
     - returns: `EventLoopFuture` of `LikeContent` 
     */
    open class func likeContent(contentLikeV3Request: ContentLikeV3Request, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<LikeContent> {
        return likeContentRaw(contentLikeV3Request: contentLikeV3Request, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> LikeContent in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([String].self, using: Configuration.contentConfiguration.requireDecoder(for: [String].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

}
